//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Caracter"",
            ""id"": ""69594092-b129-43a3-b55b-c7120178ed62"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""12945894-460f-49a2-bf68-f96b39f734bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3ca2230e-a74c-4331-b8b4-90204bc44a4f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InteractAlternate"",
                    ""type"": ""Button"",
                    ""id"": ""af3e0058-57c4-4606-a9cc-a48a56b63a5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""19e86f19-4180-4c5f-b661-48d36b07e36b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a122ced4-a2d5-4080-ab1f-9e030b1dce2d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""950cb677-4e03-4964-825d-e26c75f7c085"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e0e8f871-e741-4cbd-9b8b-800d54e98257"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dbf3b564-bcb1-4e40-b27f-48cd181cc7c3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6e5b37ee-ece5-47d7-a51f-c7ff603a5147"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""014d7531-6643-4597-bd14-319a554c1037"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""ededc387-f9b8-441e-a390-06617d7a3ba7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""589efddf-f169-46cb-9dc6-67cabb7f7b1b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f3880656-665e-4d46-8d02-bbb4cb21b10f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d054654b-b4ac-43a4-bc99-dbfe0315ccb6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""10c09c41-f202-49c1-9a06-3206ff5951be"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""276f8f15-07eb-4321-9557-2562e225ef28"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractAlternate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79e867a5-5177-48cb-8763-fc427d4e11ae"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Caracter
        m_Caracter = asset.FindActionMap("Caracter", throwIfNotFound: true);
        m_Caracter_Interact = m_Caracter.FindAction("Interact", throwIfNotFound: true);
        m_Caracter_Move = m_Caracter.FindAction("Move", throwIfNotFound: true);
        m_Caracter_InteractAlternate = m_Caracter.FindAction("InteractAlternate", throwIfNotFound: true);
        m_Caracter_Pause = m_Caracter.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Caracter
    private readonly InputActionMap m_Caracter;
    private ICaracterActions m_CaracterActionsCallbackInterface;
    private readonly InputAction m_Caracter_Interact;
    private readonly InputAction m_Caracter_Move;
    private readonly InputAction m_Caracter_InteractAlternate;
    private readonly InputAction m_Caracter_Pause;
    public struct CaracterActions
    {
        private @PlayerInputActions m_Wrapper;
        public CaracterActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Caracter_Interact;
        public InputAction @Move => m_Wrapper.m_Caracter_Move;
        public InputAction @InteractAlternate => m_Wrapper.m_Caracter_InteractAlternate;
        public InputAction @Pause => m_Wrapper.m_Caracter_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Caracter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CaracterActions set) { return set.Get(); }
        public void SetCallbacks(ICaracterActions instance)
        {
            if (m_Wrapper.m_CaracterActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_CaracterActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_CaracterActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_CaracterActionsCallbackInterface.OnInteract;
                @Move.started -= m_Wrapper.m_CaracterActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CaracterActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CaracterActionsCallbackInterface.OnMove;
                @InteractAlternate.started -= m_Wrapper.m_CaracterActionsCallbackInterface.OnInteractAlternate;
                @InteractAlternate.performed -= m_Wrapper.m_CaracterActionsCallbackInterface.OnInteractAlternate;
                @InteractAlternate.canceled -= m_Wrapper.m_CaracterActionsCallbackInterface.OnInteractAlternate;
                @Pause.started -= m_Wrapper.m_CaracterActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_CaracterActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_CaracterActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_CaracterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @InteractAlternate.started += instance.OnInteractAlternate;
                @InteractAlternate.performed += instance.OnInteractAlternate;
                @InteractAlternate.canceled += instance.OnInteractAlternate;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public CaracterActions @Caracter => new CaracterActions(this);
    public interface ICaracterActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnInteractAlternate(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
